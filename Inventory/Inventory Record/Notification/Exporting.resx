<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbLoading.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlh3ADcAKIEAMnJydfX17y8vOTk5P///wAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh/wtY
        TVAgRGF0YVhNUDw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlk
        Ij8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBD
        b3JlIDUuNi1jMDY3IDc5LjE1Nzc0NywgMjAxNS8wMy8zMC0yMzo0MDo0MiAgICAgICAgIj4gPHJkZjpS
        REYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4g
        PHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5j
        b20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5
        cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHht
        cE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpiOTI3OWQwNC00YTNjLTBkNDUtYTk3NS02NTA1
        ZTc0ZTAxMDYiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6NzJCNkIwQzMyQkEyMTFFNTk4MjI4NjU1
        MjYxOUY5Q0YiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6NzJCNkIwQzIyQkEyMTFFNTk4MjI4NjU1
        MjYxOUY5Q0YiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTUgKFdpbmRvd3Mp
        Ij4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6Y2FkY2RmOTQtODA1
        NC1hNDQ3LWE2MGMtM2NmNWIwNjU0ZmFiIiBzdFJlZjpkb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90
        b3Nob3A6MTA1MDM3ZTAtMmJhMS0xMWU1LTgzMjAtOGE0YTVlNGUyMmUyIi8+IDwvcmRmOkRlc2NyaXB0
        aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+Af/+/fz7+vn49/b1
        9PPy8fDv7u3s6+rp6Ofm5eTj4uHg397d3Nva2djX1tXU09LR0M/OzczLysnIx8bFxMPCwcC/vr28u7q5
        uLe2tbSzsrGwr66trKuqqainpqWko6KhoJ+enZybmpmYl5aVlJOSkZCPjo2Mi4qJiIeGhYSDgoGAf359
        fHt6eXh3dnV0c3JxcG9ubWxramloZ2ZlZGNiYWBfXl1cW1pZWFdWVVRTUlFQT05NTEtKSUhHRkVEQ0JB
        QD8+PTw7Ojk4NzY1NDMyMTAvLi0sKyopKCcmJSQjIiEgHx4dHBsaGRgXFhUUExIREA8ODQwLCgkIBwYF
        BAMCAQAAIfkECQoABAAsAAAAANwA3AAAA/9Iutz+MMpJq7046827/2AojmRpnmiqrmzrvnAsz3Rt33iu
        73zv/8CgcEgsGo/IpHLJbDqf0Kh0Sq1ar9isdsvter/gsHhMLpvP6LR6zW673/C4fE6v2+/4vH7P7/v/
        gIGCg4SFhoeIiYqLjI2Oj5CRkpOUlZaXmJmam5ydnp+goaKjpKWmp6ipqqusra6vsLGys7S1tre4ubq7
        vL2+v8DBwsPExcbHyMnKy8zNzs/Q0dLT1NXW19jZ2tunAt7f39vg4+Lj4QQA6erq0Obn6/Dt7gIK8Ovy
        7vX26QoB/v//is2jh24fgH4AAQqcp28fwoT+HkJUMKCiRYuvBja0JzGrYUeFBC6KzMiwoEMCEAOiTBmA
        okiMrjSa5Lgy5UeVL2G2kmnwYM2JPz2GzDmAZL6Z8YKCHMbT4M2IxJqedCaVJtWSPfGZK3eUm9evYMOK
        HUu2rNmzaNOqXcu2rdu3cOPKnUu3rt27ePPq3cu3r9+/gAMLHky4sOHDiBMrXsy4sePHkCNLnky5suXL
        mDNr3sy5s+fPoEOLHk26tOnTqFOrXs26tevXsGPLzpAAACH5BAkKAAQALAAAAADcANwAAAP/SLrc/jDK
        Sau9OOvNu/9gKI5kaZ5oqq5s675wLM90bd94ru987//AoHBILBqPyKRyyWw6n9CodEqtWq/YrHbL7Xq/
        4LB4TC6bz+i0es1uu9/wuHxOr9vv+Lx+z+/7/4CBgoOEhYaHiImKi4yNjo+QkZKTlJWWl5iZmpucnZ6f
        oKGio6SlpqeoqaqrrK2ur7CxsrO0tba3uLm6u7y9vr/AwcLDxMXGx8jJysvMzc7P0NHS09TV1tfY2drb
        sgLe39/b4OPQAObn5wrj4Aro7sXu6Orr3u3x5vD3APP09vf5/wjQq0dA3z4CARIqVKjLIL91/uIpWEix
        ob6H5ApeREiRtCHHjgFeORQ4MOK7jx0nggzpauRAASbloaw4c6HIjS9jpqvpcSXLVi5LagzoUyXImwFz
        DpXIM6HFpEJHFs0VtN/Sk8OqQrwqMyvOqBudKc02lpvZs2jTql3Ltq3bt3Djyp1Lt67du3jz6t3Lt6/f
        v4ADCx5MuLDhw4gTK17MuLHjx5AjS55MubLly5gza97MubPnz6BDix5NurTp06hTq17NurXr17Bjy55N
        u7bt27hz626QAAAh+QQJCgAEACwAAAAA3ADcAAAD/0i63P4wykmrvTjrzbv/YCiOZGmeaKqubOu+cCzP
        dG3feK7vfO//wKBwSCwaj8ikcslsOp/QqHRKrVqv2Kx2y+16v+CweEwum8/otHrNbrvf8Lh8Tq/b7/i8
        fs/v+/+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2
        t7i5uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna270C3t/f2+Dj0ADm5+cK4+AK6O7F7ujq
        697t8ebw9wDz9Pb3ugECChToLx6/dQXfERjI8BXDgQnlEaBXj4C+fQsfBnSoMbxAxHQTKX7El1EjR5MW
        9R0kl/JfyYcnYbY0GLLfTIUdPbrKORIjRQE9FfDc2TFoTYQ3JQ5tNfTiSnZJQS5l1VTlUZZOXzbMlfWn
        0WFdRUYlCdaq17EYnZ3Ntpab27dw48qdS7eu3bt48+rdy7ev37+AAwseTLiw4cOIEytezLix48eQI0ue
        TLmy5cuYM2vezLmz58+gQ4seTbq06dOoU6tezbq169ewY8ueTbu27du4c+vezbu379/Ag/NOAAAh+QQJ
        CgAEACwAAAAA3ADcAAAD/0i63P4wykmrvTjrzbv/YCiOZGmeaKqubOu+cCzPdG3feK7vfO//wKBwSCwa
        j8ikcslsOp/QqHRKrVqv2Kx2y+16v+CweEwum8/otHrNbrvf8Lh8Tq/b7/i8fs/v+/+AgYKDhIWGh4iJ
        iouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5uru8vb6/wMHCw8TF
        xsfIycrLzM3Oz9DR0tPU1dbX2Nna28gC3t/f2+Dj0ADm5+cK4+AK6O7F7ujq697t8ebw9wDz9Pb3ugEC
        ChToLx6/dQXf5RrIMKE8AvTqEdC3z9WAixgxKmA40LphOogRPeKzmDHjRo4BRVaMKEDlq5ImCaBMOVHf
        QXI1/5GEOeAkSpcg++U0uBOmT45AWQLFNTNA0pBDFTKd+VQoxXw6lUZ9OOxqUIRbP3a1+RWnV2das6Xl
        xrat27dw48qdS7eu3bt48+rdy7ev37+AAwseTLiw4cOIEytezLix48eQI0ueTLmy5cuYM2vezLmz58+g
        Q4seTbq06dOoU6tezbq169ewY8ueTbu27du4c+vezbu379+vEwAAIfkECQoABAAsAAAAANwA3AAAA/9I
        utz+MMpJq7046827/2AojmRpnmiqrmzrvnAsz3Rt33iu73zv/8CgcEgsGo/IpHLJbDqf0Kh0Sq1ar9is
        dsvter/gsHhMLpvP6LR6zW673/C4fE6v2+/4vH7P7/v/gIGCg4SFhoeIiYqLjI2Oj5CRkpOUlZaXmJma
        m5ydnp+goaKjpKWmp6ipqqusra6vsLGys7S1tre4ubq7vL2+v8DBwsPExcbHyMnKy8zNzs/Q0dLT1NXW
        19jZ2tvTAt7f39vg49AA5ufnCuPg5ejo6uve7e7m8PHFAfn6+gr06QTx5BHbR7CfPwD21r0awLBhQwUE
        90GMmM+gv4TkXDncOJGxYseIFulhZKdx40MCFCuiTBnS3chwJU0O+FhwpUcCBxECDLhQ5kybIIHWzPlS
        4LCUAVq+23lvIEucB4sKmCeSqcJnRK1mdJY14FRtXsXx5Ea2rNmzaNOqXcu2rdu3cOPKnUu3rt27ePPq
        3cu3r9+/gAMLHky4sOHDiBMrXsy4sePHkCNLnky5suXLmDNr3sy5s+fPoEOLHk26tOnTqFOrXs26tevX
        sGPLnk27tu3bnhMAACH5BAkKAAQALAAAAADcANwAAAP/SLrc/jDKSau9OOvNu/9gKI5kaZ5oqq5s675w
        LM90bd94ru987//AoHBILBqPyKRyyWw6n9CodEqtWq/YrHbL7Xq/4LB4TC6bz+i0es1uu9/wuHxOr9vv
        +Lx+z+/7/4CBgoOEhYaHiImKi4yNjo+QkZKTlJWWl5iZmpucnZ6foKGio6SlpqeoqaqrrK2ur7CxsrO0
        tba3uLm6u7y9vr/AwcLDxMXGx8jJysvMzc7P0NHS09TV1tfY2drb3N3eDADh4uLb4+bl5uTPAezt7Qrp
        6s7u9PDxAK/07goD/f7+CvS9IyCQnb14+Qry+/cvoEKCD+/hc1UwwEKG/RwK1KjvimC6hBsJYAQIMWRF
        j+coPhyZsWRHl/UISIR2UuY9mhFvapu5U2c2nt+CCh1KtKjRo0iTKl3KtKnTp1CjSp1KtarVq1izat3K
        tavXr2DDih1LtqzZs2jTql3Ltq3bt3Djyp1Lt67du3jz6t3Lt6/fv4ADCx5MuLDhw4gTK17MuLHjx5Aj
        S55MufKoBAAh+QQJCgAEACwAAAAA3ADcAAAD/0i63P4wykmrvTjrzbv/YCiOZGmeaKqubOu+cCzPdG3f
        eK7vfO//wKBwSCwaj8ikcslsOp/QqHRKrVqv2Kx2y+16v+CweEwum8/otHrNbrvf8Lh8Tq/b7/i8fs/v
        +/+AgYKDhIWGh4iJiouMjY6PkJGSk5SVlpeYmZqbnJ2en6ChoqOkpaanqKmqq6ytrq+wsbKztLW2t7i5
        uru8vb6/wMHCw8TFxsfIycrLzM3Oz9DR0tPU1dbX2Nna29zd3t/gxQHj5OQr5eiv6OXn6+Pq7gEK8fIE
        A/f4+PPx++7w/gToKchHsN86g+lcCQzIzx5BfQwBLmy1cOFDiBUbUmxo8XXiAITsIh5UqBHFRFYnT6QM
        x7Kly5cwY8qcSbOmzZs4c+rcybOnz59AgwodSrSo0aNIkypdyrSp06dQo0qdSrWq1atYs2rdyrWr169g
        w4odS7as2bNo06pdy7at27dw48qdS7eu3bt48+rdy7ev37+AAwtOkQAAIfkEBQoABAAsAAAAANwA3AAA
        A/9Iutz+MMpJq7046827/2AojmRpnmiqrmzrvnAsz3Rt33iu73zv/8CgcEgsGo/IpHLJbDqf0Kh0Sq1a
        r9isdsvter/gsHhMLpvP6LR6zW673/C4fE6v2+/4vH7P7/v/gIGCg4SFhoeIiYqLjI2Oj5CRkpOUlZaX
        mJmam5ydnp+goaKjpKWmp6ipqqusra6vsLGys7S1tre4ubq7vL2+v8DBwsPExcbHyMnKy8zNzs/Q0dLT
        1NXW19jZ2tvc3bYA4OHh2+Ll5OXj2ujpAe3u7tDr4Arv9fHy9PXwBPr7A/8AAebr90oegIH6ENojELCh
        wncF8fHrF+Chv4YCJxJ0ZdCFYjuPFRli/Acy4rqSGhOKHImyVceUC529pBhSpsRsL3He9Mazp8+fQIMK
        HUq0qNGjSJMqXcq0qdOnUKNKnUq1qtWrWLNq3cq1q9evYMOKHUu2rNmzaNOqXcu2rdu3cOPKnUu3rt27
        ePPq3cu3r9+/gAMLHky4sOHDiBMrXsy4sePHkAMnAAA7
</value>
  </data>
</root>