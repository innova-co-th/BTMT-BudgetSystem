'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3643
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DS005"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DS005
    Inherits Global.System.Data.DataSet
    
    Private tableOriginalApplicant As OriginalApplicantDataTable
    
    Private tableEstimateApplicant As EstimateApplicantDataTable
    
    Private tableReviseApplicant As ReviseApplicantDataTable
    
    Private tableBG_M_SETTINGS As BG_M_SETTINGSDataTable
    
    Private tableMTPApplicant As MTPApplicantDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OriginalApplicant")) Is Nothing) Then
                MyBase.Tables.Add(New OriginalApplicantDataTable(ds.Tables("OriginalApplicant")))
            End If
            If (Not (ds.Tables("EstimateApplicant")) Is Nothing) Then
                MyBase.Tables.Add(New EstimateApplicantDataTable(ds.Tables("EstimateApplicant")))
            End If
            If (Not (ds.Tables("ReviseApplicant")) Is Nothing) Then
                MyBase.Tables.Add(New ReviseApplicantDataTable(ds.Tables("ReviseApplicant")))
            End If
            If (Not (ds.Tables("BG_M_SETTINGS")) Is Nothing) Then
                MyBase.Tables.Add(New BG_M_SETTINGSDataTable(ds.Tables("BG_M_SETTINGS")))
            End If
            If (Not (ds.Tables("MTPApplicant")) Is Nothing) Then
                MyBase.Tables.Add(New MTPApplicantDataTable(ds.Tables("MTPApplicant")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OriginalApplicant() As OriginalApplicantDataTable
        Get
            Return Me.tableOriginalApplicant
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EstimateApplicant() As EstimateApplicantDataTable
        Get
            Return Me.tableEstimateApplicant
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ReviseApplicant() As ReviseApplicantDataTable
        Get
            Return Me.tableReviseApplicant
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BG_M_SETTINGS() As BG_M_SETTINGSDataTable
        Get
            Return Me.tableBG_M_SETTINGS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MTPApplicant() As MTPApplicantDataTable
        Get
            Return Me.tableMTPApplicant
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DS005 = CType(MyBase.Clone,DS005)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("OriginalApplicant")) Is Nothing) Then
                MyBase.Tables.Add(New OriginalApplicantDataTable(ds.Tables("OriginalApplicant")))
            End If
            If (Not (ds.Tables("EstimateApplicant")) Is Nothing) Then
                MyBase.Tables.Add(New EstimateApplicantDataTable(ds.Tables("EstimateApplicant")))
            End If
            If (Not (ds.Tables("ReviseApplicant")) Is Nothing) Then
                MyBase.Tables.Add(New ReviseApplicantDataTable(ds.Tables("ReviseApplicant")))
            End If
            If (Not (ds.Tables("BG_M_SETTINGS")) Is Nothing) Then
                MyBase.Tables.Add(New BG_M_SETTINGSDataTable(ds.Tables("BG_M_SETTINGS")))
            End If
            If (Not (ds.Tables("MTPApplicant")) Is Nothing) Then
                MyBase.Tables.Add(New MTPApplicantDataTable(ds.Tables("MTPApplicant")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableOriginalApplicant = CType(MyBase.Tables("OriginalApplicant"),OriginalApplicantDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOriginalApplicant) Is Nothing) Then
                Me.tableOriginalApplicant.InitVars
            End If
        End If
        Me.tableEstimateApplicant = CType(MyBase.Tables("EstimateApplicant"),EstimateApplicantDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEstimateApplicant) Is Nothing) Then
                Me.tableEstimateApplicant.InitVars
            End If
        End If
        Me.tableReviseApplicant = CType(MyBase.Tables("ReviseApplicant"),ReviseApplicantDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReviseApplicant) Is Nothing) Then
                Me.tableReviseApplicant.InitVars
            End If
        End If
        Me.tableBG_M_SETTINGS = CType(MyBase.Tables("BG_M_SETTINGS"),BG_M_SETTINGSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBG_M_SETTINGS) Is Nothing) Then
                Me.tableBG_M_SETTINGS.InitVars
            End If
        End If
        Me.tableMTPApplicant = CType(MyBase.Tables("MTPApplicant"),MTPApplicantDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMTPApplicant) Is Nothing) Then
                Me.tableMTPApplicant.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DS005"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DS005.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableOriginalApplicant = New OriginalApplicantDataTable
        MyBase.Tables.Add(Me.tableOriginalApplicant)
        Me.tableEstimateApplicant = New EstimateApplicantDataTable
        MyBase.Tables.Add(Me.tableEstimateApplicant)
        Me.tableReviseApplicant = New ReviseApplicantDataTable
        MyBase.Tables.Add(Me.tableReviseApplicant)
        Me.tableBG_M_SETTINGS = New BG_M_SETTINGSDataTable
        MyBase.Tables.Add(Me.tableBG_M_SETTINGS)
        Me.tableMTPApplicant = New MTPApplicantDataTable
        MyBase.Tables.Add(Me.tableMTPApplicant)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOriginalApplicant() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEstimateApplicant() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReviseApplicant() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBG_M_SETTINGS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMTPApplicant() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DS005 = New DS005
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub OriginalApplicantRowChangeEventHandler(ByVal sender As Object, ByVal e As OriginalApplicantRowChangeEvent)
    
    Public Delegate Sub EstimateApplicantRowChangeEventHandler(ByVal sender As Object, ByVal e As EstimateApplicantRowChangeEvent)
    
    Public Delegate Sub ReviseApplicantRowChangeEventHandler(ByVal sender As Object, ByVal e As ReviseApplicantRowChangeEvent)
    
    Public Delegate Sub BG_M_SETTINGSRowChangeEventHandler(ByVal sender As Object, ByVal e As BG_M_SETTINGSRowChangeEvent)
    
    Public Delegate Sub MTPApplicantRowChangeEventHandler(ByVal sender As Object, ByVal e As MTPApplicantRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OriginalApplicantDataTable
        Inherits Global.System.Data.TypedTableBase(Of OriginalApplicantRow)
        
        Private columnBUDGET_YEAR As Global.System.Data.DataColumn
        
        Private columnPERIOD_TYPE As Global.System.Data.DataColumn
        
        Private columnBUDGET_ORDER_NO As Global.System.Data.DataColumn
        
        Private columnACCOUNT_NO As Global.System.Data.DataColumn
        
        Private columnACCOUNT_NAME As Global.System.Data.DataColumn
        
        Private columnCOST As Global.System.Data.DataColumn
        
        Private columnEXPENSE_TYPE As Global.System.Data.DataColumn
        
        Private columnREV_NO As Global.System.Data.DataColumn
        
        Private columnACTUAL_1ST_HALF As Global.System.Data.DataColumn
        
        Private columnREVISE_2ND_HALF As Global.System.Data.DataColumn
        
        Private columnM1 As Global.System.Data.DataColumn
        
        Private columnM2 As Global.System.Data.DataColumn
        
        Private columnM3 As Global.System.Data.DataColumn
        
        Private columnM4 As Global.System.Data.DataColumn
        
        Private columnM5 As Global.System.Data.DataColumn
        
        Private columnM6 As Global.System.Data.DataColumn
        
        Private columnM7 As Global.System.Data.DataColumn
        
        Private columnM8 As Global.System.Data.DataColumn
        
        Private columnM9 As Global.System.Data.DataColumn
        
        Private columnM10 As Global.System.Data.DataColumn
        
        Private columnM11 As Global.System.Data.DataColumn
        
        Private columnM12 As Global.System.Data.DataColumn
        
        Private columnTOTAL_1ST_HALF As Global.System.Data.DataColumn
        
        Private columnTOTAL_2ND_HALF As Global.System.Data.DataColumn
        
        Private columnMTP_RRT1 As Global.System.Data.DataColumn
        
        Private columnTOTAL_YEAR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OriginalApplicant"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUDGET_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUDGET_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERIOD_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUDGET_ORDER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUDGET_ORDER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCOUNT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCOUNT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPENSE_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPENSE_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTUAL_1ST_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTUAL_1ST_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REVISE_2ND_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREVISE_2ND_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_1ST_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_1ST_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_2ND_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_2ND_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MTP_RRT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTP_RRT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOTAL_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOTAL_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OriginalApplicantRow
            Get
                Return CType(Me.Rows(index),OriginalApplicantRow)
            End Get
        End Property
        
        Public Event OriginalApplicantRowChanging As OriginalApplicantRowChangeEventHandler
        
        Public Event OriginalApplicantRowChanged As OriginalApplicantRowChangeEventHandler
        
        Public Event OriginalApplicantRowDeleting As OriginalApplicantRowChangeEventHandler
        
        Public Event OriginalApplicantRowDeleted As OriginalApplicantRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOriginalApplicantRow(ByVal row As OriginalApplicantRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOriginalApplicantRow( _
                    ByVal BUDGET_YEAR As Decimal,  _
                    ByVal PERIOD_TYPE As Byte,  _
                    ByVal BUDGET_ORDER_NO As String,  _
                    ByVal ACCOUNT_NO As String,  _
                    ByVal ACCOUNT_NAME As String,  _
                    ByVal COST As Byte,  _
                    ByVal EXPENSE_TYPE As Byte,  _
                    ByVal REV_NO As Short,  _
                    ByVal ACTUAL_1ST_HALF As Decimal,  _
                    ByVal REVISE_2ND_HALF As Decimal,  _
                    ByVal M1 As Decimal,  _
                    ByVal M2 As Decimal,  _
                    ByVal M3 As Decimal,  _
                    ByVal M4 As Decimal,  _
                    ByVal M5 As Decimal,  _
                    ByVal M6 As Decimal,  _
                    ByVal M7 As Decimal,  _
                    ByVal M8 As Decimal,  _
                    ByVal M9 As Decimal,  _
                    ByVal M10 As Decimal,  _
                    ByVal M11 As Decimal,  _
                    ByVal M12 As Decimal,  _
                    ByVal TOTAL_1ST_HALF As Decimal,  _
                    ByVal TOTAL_2ND_HALF As Decimal,  _
                    ByVal MTP_RRT1 As Double,  _
                    ByVal TOTAL_YEAR As Decimal) As OriginalApplicantRow
            Dim rowOriginalApplicantRow As OriginalApplicantRow = CType(Me.NewRow,OriginalApplicantRow)
            Dim columnValuesArray() As Object = New Object() {BUDGET_YEAR, PERIOD_TYPE, BUDGET_ORDER_NO, ACCOUNT_NO, ACCOUNT_NAME, COST, EXPENSE_TYPE, REV_NO, ACTUAL_1ST_HALF, REVISE_2ND_HALF, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, TOTAL_1ST_HALF, TOTAL_2ND_HALF, MTP_RRT1, TOTAL_YEAR}
            rowOriginalApplicantRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOriginalApplicantRow)
            Return rowOriginalApplicantRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OriginalApplicantDataTable = CType(MyBase.Clone,OriginalApplicantDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OriginalApplicantDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBUDGET_YEAR = MyBase.Columns("BUDGET_YEAR")
            Me.columnPERIOD_TYPE = MyBase.Columns("PERIOD_TYPE")
            Me.columnBUDGET_ORDER_NO = MyBase.Columns("BUDGET_ORDER_NO")
            Me.columnACCOUNT_NO = MyBase.Columns("ACCOUNT_NO")
            Me.columnACCOUNT_NAME = MyBase.Columns("ACCOUNT_NAME")
            Me.columnCOST = MyBase.Columns("COST")
            Me.columnEXPENSE_TYPE = MyBase.Columns("EXPENSE_TYPE")
            Me.columnREV_NO = MyBase.Columns("REV_NO")
            Me.columnACTUAL_1ST_HALF = MyBase.Columns("ACTUAL_1ST_HALF")
            Me.columnREVISE_2ND_HALF = MyBase.Columns("REVISE_2ND_HALF")
            Me.columnM1 = MyBase.Columns("M1")
            Me.columnM2 = MyBase.Columns("M2")
            Me.columnM3 = MyBase.Columns("M3")
            Me.columnM4 = MyBase.Columns("M4")
            Me.columnM5 = MyBase.Columns("M5")
            Me.columnM6 = MyBase.Columns("M6")
            Me.columnM7 = MyBase.Columns("M7")
            Me.columnM8 = MyBase.Columns("M8")
            Me.columnM9 = MyBase.Columns("M9")
            Me.columnM10 = MyBase.Columns("M10")
            Me.columnM11 = MyBase.Columns("M11")
            Me.columnM12 = MyBase.Columns("M12")
            Me.columnTOTAL_1ST_HALF = MyBase.Columns("TOTAL_1ST_HALF")
            Me.columnTOTAL_2ND_HALF = MyBase.Columns("TOTAL_2ND_HALF")
            Me.columnMTP_RRT1 = MyBase.Columns("MTP_RRT1")
            Me.columnTOTAL_YEAR = MyBase.Columns("TOTAL_YEAR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBUDGET_YEAR = New Global.System.Data.DataColumn("BUDGET_YEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUDGET_YEAR)
            Me.columnPERIOD_TYPE = New Global.System.Data.DataColumn("PERIOD_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD_TYPE)
            Me.columnBUDGET_ORDER_NO = New Global.System.Data.DataColumn("BUDGET_ORDER_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUDGET_ORDER_NO)
            Me.columnACCOUNT_NO = New Global.System.Data.DataColumn("ACCOUNT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NO)
            Me.columnACCOUNT_NAME = New Global.System.Data.DataColumn("ACCOUNT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NAME)
            Me.columnCOST = New Global.System.Data.DataColumn("COST", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST)
            Me.columnEXPENSE_TYPE = New Global.System.Data.DataColumn("EXPENSE_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPENSE_TYPE)
            Me.columnREV_NO = New Global.System.Data.DataColumn("REV_NO", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV_NO)
            Me.columnACTUAL_1ST_HALF = New Global.System.Data.DataColumn("ACTUAL_1ST_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTUAL_1ST_HALF)
            Me.columnREVISE_2ND_HALF = New Global.System.Data.DataColumn("REVISE_2ND_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREVISE_2ND_HALF)
            Me.columnM1 = New Global.System.Data.DataColumn("M1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM1)
            Me.columnM2 = New Global.System.Data.DataColumn("M2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM2)
            Me.columnM3 = New Global.System.Data.DataColumn("M3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM3)
            Me.columnM4 = New Global.System.Data.DataColumn("M4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM4)
            Me.columnM5 = New Global.System.Data.DataColumn("M5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM5)
            Me.columnM6 = New Global.System.Data.DataColumn("M6", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM6)
            Me.columnM7 = New Global.System.Data.DataColumn("M7", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM7)
            Me.columnM8 = New Global.System.Data.DataColumn("M8", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM8)
            Me.columnM9 = New Global.System.Data.DataColumn("M9", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM9)
            Me.columnM10 = New Global.System.Data.DataColumn("M10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM10)
            Me.columnM11 = New Global.System.Data.DataColumn("M11", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM11)
            Me.columnM12 = New Global.System.Data.DataColumn("M12", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM12)
            Me.columnTOTAL_1ST_HALF = New Global.System.Data.DataColumn("TOTAL_1ST_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_1ST_HALF)
            Me.columnTOTAL_2ND_HALF = New Global.System.Data.DataColumn("TOTAL_2ND_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_2ND_HALF)
            Me.columnMTP_RRT1 = New Global.System.Data.DataColumn("MTP_RRT1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTP_RRT1)
            Me.columnTOTAL_YEAR = New Global.System.Data.DataColumn("TOTAL_YEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOTAL_YEAR)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOriginalApplicantRow() As OriginalApplicantRow
            Return CType(Me.NewRow,OriginalApplicantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OriginalApplicantRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OriginalApplicantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OriginalApplicantRowChangedEvent) Is Nothing) Then
                RaiseEvent OriginalApplicantRowChanged(Me, New OriginalApplicantRowChangeEvent(CType(e.Row,OriginalApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OriginalApplicantRowChangingEvent) Is Nothing) Then
                RaiseEvent OriginalApplicantRowChanging(Me, New OriginalApplicantRowChangeEvent(CType(e.Row,OriginalApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OriginalApplicantRowDeletedEvent) Is Nothing) Then
                RaiseEvent OriginalApplicantRowDeleted(Me, New OriginalApplicantRowChangeEvent(CType(e.Row,OriginalApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OriginalApplicantRowDeletingEvent) Is Nothing) Then
                RaiseEvent OriginalApplicantRowDeleting(Me, New OriginalApplicantRowChangeEvent(CType(e.Row,OriginalApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOriginalApplicantRow(ByVal row As OriginalApplicantRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS005 = New DS005
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OriginalApplicantDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EstimateApplicantDataTable
        Inherits Global.System.Data.TypedTableBase(Of EstimateApplicantRow)
        
        Private columnBUDGET_YEAR As Global.System.Data.DataColumn
        
        Private columnPERIOD_TYPE As Global.System.Data.DataColumn
        
        Private columnBUDGET_ORDER_NO As Global.System.Data.DataColumn
        
        Private columnACCOUNT_NO As Global.System.Data.DataColumn
        
        Private columnACCOUNT_NAME As Global.System.Data.DataColumn
        
        Private columnCOST As Global.System.Data.DataColumn
        
        Private columnEXPENSE_TYPE As Global.System.Data.DataColumn
        
        Private columnREV_NO As Global.System.Data.DataColumn
        
        Private columnM1 As Global.System.Data.DataColumn
        
        Private columnM2 As Global.System.Data.DataColumn
        
        Private columnM3 As Global.System.Data.DataColumn
        
        Private columnM4 As Global.System.Data.DataColumn
        
        Private columnM5 As Global.System.Data.DataColumn
        
        Private columnM6 As Global.System.Data.DataColumn
        
        Private columnM7 As Global.System.Data.DataColumn
        
        Private columnM8 As Global.System.Data.DataColumn
        
        Private columnM9 As Global.System.Data.DataColumn
        
        Private columnM10 As Global.System.Data.DataColumn
        
        Private columnM11 As Global.System.Data.DataColumn
        
        Private columnM12 As Global.System.Data.DataColumn
        
        Private columnACTUAL_1ST_HALF As Global.System.Data.DataColumn
        
        Private columnREVISE_BUDGET_2ND_HALF As Global.System.Data.DataColumn
        
        Private columnACTUAL_JUL As Global.System.Data.DataColumn
        
        Private columnACTUAL_AUG As Global.System.Data.DataColumn
        
        Private columnACTUAL_SEP As Global.System.Data.DataColumn
        
        Private columnESTIMATE_OCT As Global.System.Data.DataColumn
        
        Private columnESTIMATE_NOV As Global.System.Data.DataColumn
        
        Private columnESTIMATE_DEC As Global.System.Data.DataColumn
        
        Private columnESTIMATE_BUDGET_2ND_HALF As Global.System.Data.DataColumn
        
        Private columnDIFFERENCE_2ND_HALF As Global.System.Data.DataColumn
        
        Private columnESTIMATE_BUDGET_TOTAL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EstimateApplicant"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUDGET_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUDGET_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERIOD_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUDGET_ORDER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUDGET_ORDER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCOUNT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCOUNT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPENSE_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPENSE_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTUAL_1ST_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTUAL_1ST_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REVISE_BUDGET_2ND_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREVISE_BUDGET_2ND_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTUAL_JULColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTUAL_JUL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTUAL_AUGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTUAL_AUG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTUAL_SEPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTUAL_SEP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTIMATE_OCTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTIMATE_OCT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTIMATE_NOVColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTIMATE_NOV
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTIMATE_DECColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTIMATE_DEC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTIMATE_BUDGET_2ND_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTIMATE_BUDGET_2ND_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DIFFERENCE_2ND_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDIFFERENCE_2ND_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTIMATE_BUDGET_TOTALColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTIMATE_BUDGET_TOTAL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EstimateApplicantRow
            Get
                Return CType(Me.Rows(index),EstimateApplicantRow)
            End Get
        End Property
        
        Public Event EstimateApplicantRowChanging As EstimateApplicantRowChangeEventHandler
        
        Public Event EstimateApplicantRowChanged As EstimateApplicantRowChangeEventHandler
        
        Public Event EstimateApplicantRowDeleting As EstimateApplicantRowChangeEventHandler
        
        Public Event EstimateApplicantRowDeleted As EstimateApplicantRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEstimateApplicantRow(ByVal row As EstimateApplicantRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEstimateApplicantRow( _
                    ByVal BUDGET_YEAR As Decimal,  _
                    ByVal PERIOD_TYPE As Byte,  _
                    ByVal BUDGET_ORDER_NO As String,  _
                    ByVal ACCOUNT_NO As String,  _
                    ByVal ACCOUNT_NAME As String,  _
                    ByVal COST As Byte,  _
                    ByVal EXPENSE_TYPE As Byte,  _
                    ByVal REV_NO As Short,  _
                    ByVal M1 As Decimal,  _
                    ByVal M2 As Decimal,  _
                    ByVal M3 As Decimal,  _
                    ByVal M4 As Decimal,  _
                    ByVal M5 As Decimal,  _
                    ByVal M6 As Decimal,  _
                    ByVal M7 As Decimal,  _
                    ByVal M8 As Decimal,  _
                    ByVal M9 As Decimal,  _
                    ByVal M10 As Decimal,  _
                    ByVal M11 As Decimal,  _
                    ByVal M12 As Decimal,  _
                    ByVal ACTUAL_1ST_HALF As Decimal,  _
                    ByVal REVISE_BUDGET_2ND_HALF As Decimal,  _
                    ByVal ACTUAL_JUL As Decimal,  _
                    ByVal ACTUAL_AUG As Decimal,  _
                    ByVal ACTUAL_SEP As Decimal,  _
                    ByVal ESTIMATE_OCT As Decimal,  _
                    ByVal ESTIMATE_NOV As Decimal,  _
                    ByVal ESTIMATE_DEC As Decimal,  _
                    ByVal ESTIMATE_BUDGET_2ND_HALF As Decimal,  _
                    ByVal DIFFERENCE_2ND_HALF As Decimal,  _
                    ByVal ESTIMATE_BUDGET_TOTAL As Decimal) As EstimateApplicantRow
            Dim rowEstimateApplicantRow As EstimateApplicantRow = CType(Me.NewRow,EstimateApplicantRow)
            Dim columnValuesArray() As Object = New Object() {BUDGET_YEAR, PERIOD_TYPE, BUDGET_ORDER_NO, ACCOUNT_NO, ACCOUNT_NAME, COST, EXPENSE_TYPE, REV_NO, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, ACTUAL_1ST_HALF, REVISE_BUDGET_2ND_HALF, ACTUAL_JUL, ACTUAL_AUG, ACTUAL_SEP, ESTIMATE_OCT, ESTIMATE_NOV, ESTIMATE_DEC, ESTIMATE_BUDGET_2ND_HALF, DIFFERENCE_2ND_HALF, ESTIMATE_BUDGET_TOTAL}
            rowEstimateApplicantRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEstimateApplicantRow)
            Return rowEstimateApplicantRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EstimateApplicantDataTable = CType(MyBase.Clone,EstimateApplicantDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EstimateApplicantDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBUDGET_YEAR = MyBase.Columns("BUDGET_YEAR")
            Me.columnPERIOD_TYPE = MyBase.Columns("PERIOD_TYPE")
            Me.columnBUDGET_ORDER_NO = MyBase.Columns("BUDGET_ORDER_NO")
            Me.columnACCOUNT_NO = MyBase.Columns("ACCOUNT_NO")
            Me.columnACCOUNT_NAME = MyBase.Columns("ACCOUNT_NAME")
            Me.columnCOST = MyBase.Columns("COST")
            Me.columnEXPENSE_TYPE = MyBase.Columns("EXPENSE_TYPE")
            Me.columnREV_NO = MyBase.Columns("REV_NO")
            Me.columnM1 = MyBase.Columns("M1")
            Me.columnM2 = MyBase.Columns("M2")
            Me.columnM3 = MyBase.Columns("M3")
            Me.columnM4 = MyBase.Columns("M4")
            Me.columnM5 = MyBase.Columns("M5")
            Me.columnM6 = MyBase.Columns("M6")
            Me.columnM7 = MyBase.Columns("M7")
            Me.columnM8 = MyBase.Columns("M8")
            Me.columnM9 = MyBase.Columns("M9")
            Me.columnM10 = MyBase.Columns("M10")
            Me.columnM11 = MyBase.Columns("M11")
            Me.columnM12 = MyBase.Columns("M12")
            Me.columnACTUAL_1ST_HALF = MyBase.Columns("ACTUAL_1ST_HALF")
            Me.columnREVISE_BUDGET_2ND_HALF = MyBase.Columns("REVISE_BUDGET_2ND_HALF")
            Me.columnACTUAL_JUL = MyBase.Columns("ACTUAL_JUL")
            Me.columnACTUAL_AUG = MyBase.Columns("ACTUAL_AUG")
            Me.columnACTUAL_SEP = MyBase.Columns("ACTUAL_SEP")
            Me.columnESTIMATE_OCT = MyBase.Columns("ESTIMATE_OCT")
            Me.columnESTIMATE_NOV = MyBase.Columns("ESTIMATE_NOV")
            Me.columnESTIMATE_DEC = MyBase.Columns("ESTIMATE_DEC")
            Me.columnESTIMATE_BUDGET_2ND_HALF = MyBase.Columns("ESTIMATE_BUDGET_2ND_HALF")
            Me.columnDIFFERENCE_2ND_HALF = MyBase.Columns("DIFFERENCE_2ND_HALF")
            Me.columnESTIMATE_BUDGET_TOTAL = MyBase.Columns("ESTIMATE_BUDGET_TOTAL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBUDGET_YEAR = New Global.System.Data.DataColumn("BUDGET_YEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUDGET_YEAR)
            Me.columnPERIOD_TYPE = New Global.System.Data.DataColumn("PERIOD_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD_TYPE)
            Me.columnBUDGET_ORDER_NO = New Global.System.Data.DataColumn("BUDGET_ORDER_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUDGET_ORDER_NO)
            Me.columnACCOUNT_NO = New Global.System.Data.DataColumn("ACCOUNT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NO)
            Me.columnACCOUNT_NAME = New Global.System.Data.DataColumn("ACCOUNT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NAME)
            Me.columnCOST = New Global.System.Data.DataColumn("COST", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST)
            Me.columnEXPENSE_TYPE = New Global.System.Data.DataColumn("EXPENSE_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPENSE_TYPE)
            Me.columnREV_NO = New Global.System.Data.DataColumn("REV_NO", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV_NO)
            Me.columnM1 = New Global.System.Data.DataColumn("M1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM1)
            Me.columnM2 = New Global.System.Data.DataColumn("M2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM2)
            Me.columnM3 = New Global.System.Data.DataColumn("M3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM3)
            Me.columnM4 = New Global.System.Data.DataColumn("M4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM4)
            Me.columnM5 = New Global.System.Data.DataColumn("M5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM5)
            Me.columnM6 = New Global.System.Data.DataColumn("M6", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM6)
            Me.columnM7 = New Global.System.Data.DataColumn("M7", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM7)
            Me.columnM8 = New Global.System.Data.DataColumn("M8", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM8)
            Me.columnM9 = New Global.System.Data.DataColumn("M9", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM9)
            Me.columnM10 = New Global.System.Data.DataColumn("M10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM10)
            Me.columnM11 = New Global.System.Data.DataColumn("M11", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM11)
            Me.columnM12 = New Global.System.Data.DataColumn("M12", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM12)
            Me.columnACTUAL_1ST_HALF = New Global.System.Data.DataColumn("ACTUAL_1ST_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTUAL_1ST_HALF)
            Me.columnREVISE_BUDGET_2ND_HALF = New Global.System.Data.DataColumn("REVISE_BUDGET_2ND_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREVISE_BUDGET_2ND_HALF)
            Me.columnACTUAL_JUL = New Global.System.Data.DataColumn("ACTUAL_JUL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTUAL_JUL)
            Me.columnACTUAL_AUG = New Global.System.Data.DataColumn("ACTUAL_AUG", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTUAL_AUG)
            Me.columnACTUAL_SEP = New Global.System.Data.DataColumn("ACTUAL_SEP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTUAL_SEP)
            Me.columnESTIMATE_OCT = New Global.System.Data.DataColumn("ESTIMATE_OCT", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTIMATE_OCT)
            Me.columnESTIMATE_NOV = New Global.System.Data.DataColumn("ESTIMATE_NOV", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTIMATE_NOV)
            Me.columnESTIMATE_DEC = New Global.System.Data.DataColumn("ESTIMATE_DEC", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTIMATE_DEC)
            Me.columnESTIMATE_BUDGET_2ND_HALF = New Global.System.Data.DataColumn("ESTIMATE_BUDGET_2ND_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTIMATE_BUDGET_2ND_HALF)
            Me.columnDIFFERENCE_2ND_HALF = New Global.System.Data.DataColumn("DIFFERENCE_2ND_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDIFFERENCE_2ND_HALF)
            Me.columnESTIMATE_BUDGET_TOTAL = New Global.System.Data.DataColumn("ESTIMATE_BUDGET_TOTAL", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTIMATE_BUDGET_TOTAL)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEstimateApplicantRow() As EstimateApplicantRow
            Return CType(Me.NewRow,EstimateApplicantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EstimateApplicantRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EstimateApplicantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EstimateApplicantRowChangedEvent) Is Nothing) Then
                RaiseEvent EstimateApplicantRowChanged(Me, New EstimateApplicantRowChangeEvent(CType(e.Row,EstimateApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EstimateApplicantRowChangingEvent) Is Nothing) Then
                RaiseEvent EstimateApplicantRowChanging(Me, New EstimateApplicantRowChangeEvent(CType(e.Row,EstimateApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EstimateApplicantRowDeletedEvent) Is Nothing) Then
                RaiseEvent EstimateApplicantRowDeleted(Me, New EstimateApplicantRowChangeEvent(CType(e.Row,EstimateApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EstimateApplicantRowDeletingEvent) Is Nothing) Then
                RaiseEvent EstimateApplicantRowDeleting(Me, New EstimateApplicantRowChangeEvent(CType(e.Row,EstimateApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEstimateApplicantRow(ByVal row As EstimateApplicantRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS005 = New DS005
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EstimateApplicantDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReviseApplicantDataTable
        Inherits Global.System.Data.TypedTableBase(Of ReviseApplicantRow)
        
        Private columnBUDGET_YEAR As Global.System.Data.DataColumn
        
        Private columnPERIOD_TYPE As Global.System.Data.DataColumn
        
        Private columnBUDGET_ORDER_NO As Global.System.Data.DataColumn
        
        Private columnACCOUNT_NO As Global.System.Data.DataColumn
        
        Private columnACCOUNT_NAME As Global.System.Data.DataColumn
        
        Private columnCOST As Global.System.Data.DataColumn
        
        Private columnEXPENSE_TYPE As Global.System.Data.DataColumn
        
        Private columnREV_NO As Global.System.Data.DataColumn
        
        Private columnM1 As Global.System.Data.DataColumn
        
        Private columnM2 As Global.System.Data.DataColumn
        
        Private columnM3 As Global.System.Data.DataColumn
        
        Private columnM4 As Global.System.Data.DataColumn
        
        Private columnM5 As Global.System.Data.DataColumn
        
        Private columnM6 As Global.System.Data.DataColumn
        
        Private columnM7 As Global.System.Data.DataColumn
        
        Private columnM8 As Global.System.Data.DataColumn
        
        Private columnM9 As Global.System.Data.DataColumn
        
        Private columnM10 As Global.System.Data.DataColumn
        
        Private columnM11 As Global.System.Data.DataColumn
        
        Private columnM12 As Global.System.Data.DataColumn
        
        Private columnORIGINAL_1ST_HALF As Global.System.Data.DataColumn
        
        Private columnACTUAL_JAN As Global.System.Data.DataColumn
        
        Private columnACTUAL_FEB As Global.System.Data.DataColumn
        
        Private columnACTUAL_MAR As Global.System.Data.DataColumn
        
        Private columnESTIMATE_APR As Global.System.Data.DataColumn
        
        Private columnESTIMATE_MAY As Global.System.Data.DataColumn
        
        Private columnESTIMATE_JUN As Global.System.Data.DataColumn
        
        Private columnESTIMATE_1ST_HALF As Global.System.Data.DataColumn
        
        Private columnORIGINAL_2ND_HALF As Global.System.Data.DataColumn
        
        Private columnRRT1 As Global.System.Data.DataColumn
        
        Private columnRRT2 As Global.System.Data.DataColumn
        
        Private columnRRT3 As Global.System.Data.DataColumn
        
        Private columnRRT4 As Global.System.Data.DataColumn
        
        Private columnRRT5 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ReviseApplicant"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUDGET_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUDGET_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERIOD_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUDGET_ORDER_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUDGET_ORDER_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCOUNT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCOUNT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPENSE_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPENSE_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M8Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM8
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M9Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM9
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M10Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM10
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property M12Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnM12
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORIGINAL_1ST_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORIGINAL_1ST_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTUAL_JANColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTUAL_JAN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTUAL_FEBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTUAL_FEB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACTUAL_MARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACTUAL_MAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTIMATE_APRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTIMATE_APR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTIMATE_MAYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTIMATE_MAY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTIMATE_JUNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTIMATE_JUN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTIMATE_1ST_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTIMATE_1ST_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORIGINAL_2ND_HALFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORIGINAL_2ND_HALF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RRT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RRT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RRT3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRT3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RRT4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRT4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RRT5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRT5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReviseApplicantRow
            Get
                Return CType(Me.Rows(index),ReviseApplicantRow)
            End Get
        End Property
        
        Public Event ReviseApplicantRowChanging As ReviseApplicantRowChangeEventHandler
        
        Public Event ReviseApplicantRowChanged As ReviseApplicantRowChangeEventHandler
        
        Public Event ReviseApplicantRowDeleting As ReviseApplicantRowChangeEventHandler
        
        Public Event ReviseApplicantRowDeleted As ReviseApplicantRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReviseApplicantRow(ByVal row As ReviseApplicantRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReviseApplicantRow( _
                    ByVal BUDGET_YEAR As Decimal,  _
                    ByVal PERIOD_TYPE As Byte,  _
                    ByVal BUDGET_ORDER_NO As String,  _
                    ByVal ACCOUNT_NO As String,  _
                    ByVal ACCOUNT_NAME As String,  _
                    ByVal COST As Byte,  _
                    ByVal EXPENSE_TYPE As Byte,  _
                    ByVal REV_NO As Short,  _
                    ByVal M1 As Decimal,  _
                    ByVal M2 As Decimal,  _
                    ByVal M3 As Decimal,  _
                    ByVal M4 As Decimal,  _
                    ByVal M5 As Decimal,  _
                    ByVal M6 As Decimal,  _
                    ByVal M7 As Decimal,  _
                    ByVal M8 As Decimal,  _
                    ByVal M9 As Decimal,  _
                    ByVal M10 As Decimal,  _
                    ByVal M11 As Decimal,  _
                    ByVal M12 As Decimal,  _
                    ByVal ORIGINAL_1ST_HALF As Decimal,  _
                    ByVal ACTUAL_JAN As Decimal,  _
                    ByVal ACTUAL_FEB As Decimal,  _
                    ByVal ACTUAL_MAR As Decimal,  _
                    ByVal ESTIMATE_APR As Decimal,  _
                    ByVal ESTIMATE_MAY As Decimal,  _
                    ByVal ESTIMATE_JUN As Decimal,  _
                    ByVal ESTIMATE_1ST_HALF As Decimal,  _
                    ByVal ORIGINAL_2ND_HALF As Decimal,  _
                    ByVal RRT1 As Decimal,  _
                    ByVal RRT2 As Decimal,  _
                    ByVal RRT3 As Decimal,  _
                    ByVal RRT4 As Decimal,  _
                    ByVal RRT5 As Decimal) As ReviseApplicantRow
            Dim rowReviseApplicantRow As ReviseApplicantRow = CType(Me.NewRow,ReviseApplicantRow)
            Dim columnValuesArray() As Object = New Object() {BUDGET_YEAR, PERIOD_TYPE, BUDGET_ORDER_NO, ACCOUNT_NO, ACCOUNT_NAME, COST, EXPENSE_TYPE, REV_NO, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, ORIGINAL_1ST_HALF, ACTUAL_JAN, ACTUAL_FEB, ACTUAL_MAR, ESTIMATE_APR, ESTIMATE_MAY, ESTIMATE_JUN, ESTIMATE_1ST_HALF, ORIGINAL_2ND_HALF, RRT1, RRT2, RRT3, RRT4, RRT5}
            rowReviseApplicantRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowReviseApplicantRow)
            Return rowReviseApplicantRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ReviseApplicantDataTable = CType(MyBase.Clone,ReviseApplicantDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ReviseApplicantDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBUDGET_YEAR = MyBase.Columns("BUDGET_YEAR")
            Me.columnPERIOD_TYPE = MyBase.Columns("PERIOD_TYPE")
            Me.columnBUDGET_ORDER_NO = MyBase.Columns("BUDGET_ORDER_NO")
            Me.columnACCOUNT_NO = MyBase.Columns("ACCOUNT_NO")
            Me.columnACCOUNT_NAME = MyBase.Columns("ACCOUNT_NAME")
            Me.columnCOST = MyBase.Columns("COST")
            Me.columnEXPENSE_TYPE = MyBase.Columns("EXPENSE_TYPE")
            Me.columnREV_NO = MyBase.Columns("REV_NO")
            Me.columnM1 = MyBase.Columns("M1")
            Me.columnM2 = MyBase.Columns("M2")
            Me.columnM3 = MyBase.Columns("M3")
            Me.columnM4 = MyBase.Columns("M4")
            Me.columnM5 = MyBase.Columns("M5")
            Me.columnM6 = MyBase.Columns("M6")
            Me.columnM7 = MyBase.Columns("M7")
            Me.columnM8 = MyBase.Columns("M8")
            Me.columnM9 = MyBase.Columns("M9")
            Me.columnM10 = MyBase.Columns("M10")
            Me.columnM11 = MyBase.Columns("M11")
            Me.columnM12 = MyBase.Columns("M12")
            Me.columnORIGINAL_1ST_HALF = MyBase.Columns("ORIGINAL_1ST_HALF")
            Me.columnACTUAL_JAN = MyBase.Columns("ACTUAL_JAN")
            Me.columnACTUAL_FEB = MyBase.Columns("ACTUAL_FEB")
            Me.columnACTUAL_MAR = MyBase.Columns("ACTUAL_MAR")
            Me.columnESTIMATE_APR = MyBase.Columns("ESTIMATE_APR")
            Me.columnESTIMATE_MAY = MyBase.Columns("ESTIMATE_MAY")
            Me.columnESTIMATE_JUN = MyBase.Columns("ESTIMATE_JUN")
            Me.columnESTIMATE_1ST_HALF = MyBase.Columns("ESTIMATE_1ST_HALF")
            Me.columnORIGINAL_2ND_HALF = MyBase.Columns("ORIGINAL_2ND_HALF")
            Me.columnRRT1 = MyBase.Columns("RRT1")
            Me.columnRRT2 = MyBase.Columns("RRT2")
            Me.columnRRT3 = MyBase.Columns("RRT3")
            Me.columnRRT4 = MyBase.Columns("RRT4")
            Me.columnRRT5 = MyBase.Columns("RRT5")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBUDGET_YEAR = New Global.System.Data.DataColumn("BUDGET_YEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUDGET_YEAR)
            Me.columnPERIOD_TYPE = New Global.System.Data.DataColumn("PERIOD_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD_TYPE)
            Me.columnBUDGET_ORDER_NO = New Global.System.Data.DataColumn("BUDGET_ORDER_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUDGET_ORDER_NO)
            Me.columnACCOUNT_NO = New Global.System.Data.DataColumn("ACCOUNT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NO)
            Me.columnACCOUNT_NAME = New Global.System.Data.DataColumn("ACCOUNT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NAME)
            Me.columnCOST = New Global.System.Data.DataColumn("COST", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST)
            Me.columnEXPENSE_TYPE = New Global.System.Data.DataColumn("EXPENSE_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPENSE_TYPE)
            Me.columnREV_NO = New Global.System.Data.DataColumn("REV_NO", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV_NO)
            Me.columnM1 = New Global.System.Data.DataColumn("M1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM1)
            Me.columnM2 = New Global.System.Data.DataColumn("M2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM2)
            Me.columnM3 = New Global.System.Data.DataColumn("M3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM3)
            Me.columnM4 = New Global.System.Data.DataColumn("M4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM4)
            Me.columnM5 = New Global.System.Data.DataColumn("M5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM5)
            Me.columnM6 = New Global.System.Data.DataColumn("M6", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM6)
            Me.columnM7 = New Global.System.Data.DataColumn("M7", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM7)
            Me.columnM8 = New Global.System.Data.DataColumn("M8", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM8)
            Me.columnM9 = New Global.System.Data.DataColumn("M9", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM9)
            Me.columnM10 = New Global.System.Data.DataColumn("M10", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM10)
            Me.columnM11 = New Global.System.Data.DataColumn("M11", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM11)
            Me.columnM12 = New Global.System.Data.DataColumn("M12", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnM12)
            Me.columnORIGINAL_1ST_HALF = New Global.System.Data.DataColumn("ORIGINAL_1ST_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORIGINAL_1ST_HALF)
            Me.columnACTUAL_JAN = New Global.System.Data.DataColumn("ACTUAL_JAN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTUAL_JAN)
            Me.columnACTUAL_FEB = New Global.System.Data.DataColumn("ACTUAL_FEB", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTUAL_FEB)
            Me.columnACTUAL_MAR = New Global.System.Data.DataColumn("ACTUAL_MAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACTUAL_MAR)
            Me.columnESTIMATE_APR = New Global.System.Data.DataColumn("ESTIMATE_APR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTIMATE_APR)
            Me.columnESTIMATE_MAY = New Global.System.Data.DataColumn("ESTIMATE_MAY", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTIMATE_MAY)
            Me.columnESTIMATE_JUN = New Global.System.Data.DataColumn("ESTIMATE_JUN", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTIMATE_JUN)
            Me.columnESTIMATE_1ST_HALF = New Global.System.Data.DataColumn("ESTIMATE_1ST_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTIMATE_1ST_HALF)
            Me.columnORIGINAL_2ND_HALF = New Global.System.Data.DataColumn("ORIGINAL_2ND_HALF", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORIGINAL_2ND_HALF)
            Me.columnRRT1 = New Global.System.Data.DataColumn("RRT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRT1)
            Me.columnRRT2 = New Global.System.Data.DataColumn("RRT2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRT2)
            Me.columnRRT3 = New Global.System.Data.DataColumn("RRT3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRT3)
            Me.columnRRT4 = New Global.System.Data.DataColumn("RRT4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRT4)
            Me.columnRRT5 = New Global.System.Data.DataColumn("RRT5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRT5)
            Me.columnORIGINAL_1ST_HALF.Caption = "TOTAL_1ST_HALF"
            Me.columnACTUAL_JAN.Caption = "TOTAL_2ND_HALF"
            Me.columnACTUAL_FEB.Caption = "TOTAL_YEAR"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReviseApplicantRow() As ReviseApplicantRow
            Return CType(Me.NewRow,ReviseApplicantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ReviseApplicantRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ReviseApplicantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReviseApplicantRowChangedEvent) Is Nothing) Then
                RaiseEvent ReviseApplicantRowChanged(Me, New ReviseApplicantRowChangeEvent(CType(e.Row,ReviseApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReviseApplicantRowChangingEvent) Is Nothing) Then
                RaiseEvent ReviseApplicantRowChanging(Me, New ReviseApplicantRowChangeEvent(CType(e.Row,ReviseApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReviseApplicantRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReviseApplicantRowDeleted(Me, New ReviseApplicantRowChangeEvent(CType(e.Row,ReviseApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReviseApplicantRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReviseApplicantRowDeleting(Me, New ReviseApplicantRowChangeEvent(CType(e.Row,ReviseApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReviseApplicantRow(ByVal row As ReviseApplicantRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS005 = New DS005
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReviseApplicantDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BG_M_SETTINGSDataTable
        Inherits Global.System.Data.TypedTableBase(Of BG_M_SETTINGSRow)
        
        Private columnAUTH1_IMAGE As Global.System.Data.DataColumn
        
        Private columnAUTH2_IMAGE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BG_M_SETTINGS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUTH1_IMAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUTH1_IMAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AUTH2_IMAGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUTH2_IMAGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BG_M_SETTINGSRow
            Get
                Return CType(Me.Rows(index),BG_M_SETTINGSRow)
            End Get
        End Property
        
        Public Event BG_M_SETTINGSRowChanging As BG_M_SETTINGSRowChangeEventHandler
        
        Public Event BG_M_SETTINGSRowChanged As BG_M_SETTINGSRowChangeEventHandler
        
        Public Event BG_M_SETTINGSRowDeleting As BG_M_SETTINGSRowChangeEventHandler
        
        Public Event BG_M_SETTINGSRowDeleted As BG_M_SETTINGSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBG_M_SETTINGSRow(ByVal row As BG_M_SETTINGSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBG_M_SETTINGSRow(ByVal AUTH1_IMAGE() As Byte, ByVal AUTH2_IMAGE() As Byte) As BG_M_SETTINGSRow
            Dim rowBG_M_SETTINGSRow As BG_M_SETTINGSRow = CType(Me.NewRow,BG_M_SETTINGSRow)
            Dim columnValuesArray() As Object = New Object() {AUTH1_IMAGE, AUTH2_IMAGE}
            rowBG_M_SETTINGSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBG_M_SETTINGSRow)
            Return rowBG_M_SETTINGSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BG_M_SETTINGSDataTable = CType(MyBase.Clone,BG_M_SETTINGSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BG_M_SETTINGSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAUTH1_IMAGE = MyBase.Columns("AUTH1_IMAGE")
            Me.columnAUTH2_IMAGE = MyBase.Columns("AUTH2_IMAGE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAUTH1_IMAGE = New Global.System.Data.DataColumn("AUTH1_IMAGE", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUTH1_IMAGE)
            Me.columnAUTH2_IMAGE = New Global.System.Data.DataColumn("AUTH2_IMAGE", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUTH2_IMAGE)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBG_M_SETTINGSRow() As BG_M_SETTINGSRow
            Return CType(Me.NewRow,BG_M_SETTINGSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BG_M_SETTINGSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BG_M_SETTINGSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BG_M_SETTINGSRowChangedEvent) Is Nothing) Then
                RaiseEvent BG_M_SETTINGSRowChanged(Me, New BG_M_SETTINGSRowChangeEvent(CType(e.Row,BG_M_SETTINGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BG_M_SETTINGSRowChangingEvent) Is Nothing) Then
                RaiseEvent BG_M_SETTINGSRowChanging(Me, New BG_M_SETTINGSRowChangeEvent(CType(e.Row,BG_M_SETTINGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BG_M_SETTINGSRowDeletedEvent) Is Nothing) Then
                RaiseEvent BG_M_SETTINGSRowDeleted(Me, New BG_M_SETTINGSRowChangeEvent(CType(e.Row,BG_M_SETTINGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BG_M_SETTINGSRowDeletingEvent) Is Nothing) Then
                RaiseEvent BG_M_SETTINGSRowDeleting(Me, New BG_M_SETTINGSRowChangeEvent(CType(e.Row,BG_M_SETTINGSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBG_M_SETTINGSRow(ByVal row As BG_M_SETTINGSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS005 = New DS005
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BG_M_SETTINGSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MTPApplicantDataTable
        Inherits Global.System.Data.TypedTableBase(Of MTPApplicantRow)
        
        Private columnBUDGET_YEAR As Global.System.Data.DataColumn
        
        Private columnPERIOD_TYPE As Global.System.Data.DataColumn
        
        Private columnPROJECT_NO As Global.System.Data.DataColumn
        
        Private columnACCOUNT_NO As Global.System.Data.DataColumn
        
        Private columnACCOUNT_NAME As Global.System.Data.DataColumn
        
        Private columnEXPENSE_TYPE As Global.System.Data.DataColumn
        
        Private columnCOST As Global.System.Data.DataColumn
        
        Private columnREV_NO As Global.System.Data.DataColumn
        
        Private columnRRT1 As Global.System.Data.DataColumn
        
        Private columnRRT2 As Global.System.Data.DataColumn
        
        Private columnRRT3 As Global.System.Data.DataColumn
        
        Private columnRRT4 As Global.System.Data.DataColumn
        
        Private columnRRT5 As Global.System.Data.DataColumn
        
        Private columnRevYear As Global.System.Data.DataColumn
        
        Private columnPrevRRT1 As Global.System.Data.DataColumn
        
        Private columnPrevRRT2 As Global.System.Data.DataColumn
        
        Private columnPrevRRT3 As Global.System.Data.DataColumn
        
        Private columnPrevRRT4 As Global.System.Data.DataColumn
        
        Private columnPrevRRT5 As Global.System.Data.DataColumn
        
        Private columnDiffYear As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MTPApplicant"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BUDGET_YEARColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBUDGET_YEAR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PERIOD_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPERIOD_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROJECT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROJECT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCOUNT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ACCOUNT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnACCOUNT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EXPENSE_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXPENSE_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REV_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREV_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RRT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RRT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RRT3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRT3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RRT4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRT4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RRT5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRRT5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RevYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRevYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrevRRT1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrevRRT1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrevRRT2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrevRRT2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrevRRT3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrevRRT3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrevRRT4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrevRRT4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrevRRT5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrevRRT5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiffYearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiffYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MTPApplicantRow
            Get
                Return CType(Me.Rows(index),MTPApplicantRow)
            End Get
        End Property
        
        Public Event MTPApplicantRowChanging As MTPApplicantRowChangeEventHandler
        
        Public Event MTPApplicantRowChanged As MTPApplicantRowChangeEventHandler
        
        Public Event MTPApplicantRowDeleting As MTPApplicantRowChangeEventHandler
        
        Public Event MTPApplicantRowDeleted As MTPApplicantRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMTPApplicantRow(ByVal row As MTPApplicantRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMTPApplicantRow( _
                    ByVal BUDGET_YEAR As Decimal,  _
                    ByVal PERIOD_TYPE As Byte,  _
                    ByVal PROJECT_NO As Byte,  _
                    ByVal ACCOUNT_NO As String,  _
                    ByVal ACCOUNT_NAME As String,  _
                    ByVal EXPENSE_TYPE As Byte,  _
                    ByVal COST As Byte,  _
                    ByVal REV_NO As Short,  _
                    ByVal RRT1 As Decimal,  _
                    ByVal RRT2 As Decimal,  _
                    ByVal RRT3 As Decimal,  _
                    ByVal RRT4 As Decimal,  _
                    ByVal RRT5 As Decimal,  _
                    ByVal RevYear As Decimal,  _
                    ByVal PrevRRT1 As Decimal,  _
                    ByVal PrevRRT2 As Decimal,  _
                    ByVal PrevRRT3 As Decimal,  _
                    ByVal PrevRRT4 As Decimal,  _
                    ByVal PrevRRT5 As Decimal,  _
                    ByVal DiffYear As Decimal) As MTPApplicantRow
            Dim rowMTPApplicantRow As MTPApplicantRow = CType(Me.NewRow,MTPApplicantRow)
            Dim columnValuesArray() As Object = New Object() {BUDGET_YEAR, PERIOD_TYPE, PROJECT_NO, ACCOUNT_NO, ACCOUNT_NAME, EXPENSE_TYPE, COST, REV_NO, RRT1, RRT2, RRT3, RRT4, RRT5, RevYear, PrevRRT1, PrevRRT2, PrevRRT3, PrevRRT4, PrevRRT5, DiffYear}
            rowMTPApplicantRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMTPApplicantRow)
            Return rowMTPApplicantRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MTPApplicantDataTable = CType(MyBase.Clone,MTPApplicantDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MTPApplicantDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnBUDGET_YEAR = MyBase.Columns("BUDGET_YEAR")
            Me.columnPERIOD_TYPE = MyBase.Columns("PERIOD_TYPE")
            Me.columnPROJECT_NO = MyBase.Columns("PROJECT_NO")
            Me.columnACCOUNT_NO = MyBase.Columns("ACCOUNT_NO")
            Me.columnACCOUNT_NAME = MyBase.Columns("ACCOUNT_NAME")
            Me.columnEXPENSE_TYPE = MyBase.Columns("EXPENSE_TYPE")
            Me.columnCOST = MyBase.Columns("COST")
            Me.columnREV_NO = MyBase.Columns("REV_NO")
            Me.columnRRT1 = MyBase.Columns("RRT1")
            Me.columnRRT2 = MyBase.Columns("RRT2")
            Me.columnRRT3 = MyBase.Columns("RRT3")
            Me.columnRRT4 = MyBase.Columns("RRT4")
            Me.columnRRT5 = MyBase.Columns("RRT5")
            Me.columnRevYear = MyBase.Columns("RevYear")
            Me.columnPrevRRT1 = MyBase.Columns("PrevRRT1")
            Me.columnPrevRRT2 = MyBase.Columns("PrevRRT2")
            Me.columnPrevRRT3 = MyBase.Columns("PrevRRT3")
            Me.columnPrevRRT4 = MyBase.Columns("PrevRRT4")
            Me.columnPrevRRT5 = MyBase.Columns("PrevRRT5")
            Me.columnDiffYear = MyBase.Columns("DiffYear")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnBUDGET_YEAR = New Global.System.Data.DataColumn("BUDGET_YEAR", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBUDGET_YEAR)
            Me.columnPERIOD_TYPE = New Global.System.Data.DataColumn("PERIOD_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPERIOD_TYPE)
            Me.columnPROJECT_NO = New Global.System.Data.DataColumn("PROJECT_NO", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROJECT_NO)
            Me.columnACCOUNT_NO = New Global.System.Data.DataColumn("ACCOUNT_NO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NO)
            Me.columnACCOUNT_NAME = New Global.System.Data.DataColumn("ACCOUNT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnACCOUNT_NAME)
            Me.columnEXPENSE_TYPE = New Global.System.Data.DataColumn("EXPENSE_TYPE", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXPENSE_TYPE)
            Me.columnCOST = New Global.System.Data.DataColumn("COST", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOST)
            Me.columnREV_NO = New Global.System.Data.DataColumn("REV_NO", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREV_NO)
            Me.columnRRT1 = New Global.System.Data.DataColumn("RRT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRT1)
            Me.columnRRT2 = New Global.System.Data.DataColumn("RRT2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRT2)
            Me.columnRRT3 = New Global.System.Data.DataColumn("RRT3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRT3)
            Me.columnRRT4 = New Global.System.Data.DataColumn("RRT4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRT4)
            Me.columnRRT5 = New Global.System.Data.DataColumn("RRT5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRRT5)
            Me.columnRevYear = New Global.System.Data.DataColumn("RevYear", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRevYear)
            Me.columnPrevRRT1 = New Global.System.Data.DataColumn("PrevRRT1", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrevRRT1)
            Me.columnPrevRRT2 = New Global.System.Data.DataColumn("PrevRRT2", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrevRRT2)
            Me.columnPrevRRT3 = New Global.System.Data.DataColumn("PrevRRT3", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrevRRT3)
            Me.columnPrevRRT4 = New Global.System.Data.DataColumn("PrevRRT4", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrevRRT4)
            Me.columnPrevRRT5 = New Global.System.Data.DataColumn("PrevRRT5", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrevRRT5)
            Me.columnDiffYear = New Global.System.Data.DataColumn("DiffYear", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiffYear)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnACCOUNT_NO}, false))
            Me.columnBUDGET_YEAR.AllowDBNull = false
            Me.columnPERIOD_TYPE.AllowDBNull = false
            Me.columnPROJECT_NO.AllowDBNull = false
            Me.columnACCOUNT_NO.Unique = true
            Me.columnACCOUNT_NO.MaxLength = 6
            Me.columnACCOUNT_NAME.MaxLength = 100
            Me.columnREV_NO.ReadOnly = true
            Me.columnRRT1.ReadOnly = true
            Me.columnRRT2.ReadOnly = true
            Me.columnRRT3.ReadOnly = true
            Me.columnRRT4.ReadOnly = true
            Me.columnRRT5.ReadOnly = true
            Me.columnRevYear.ReadOnly = true
            Me.columnPrevRRT1.ReadOnly = true
            Me.columnPrevRRT2.ReadOnly = true
            Me.columnPrevRRT3.ReadOnly = true
            Me.columnPrevRRT4.ReadOnly = true
            Me.columnPrevRRT5.ReadOnly = true
            Me.columnDiffYear.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMTPApplicantRow() As MTPApplicantRow
            Return CType(Me.NewRow,MTPApplicantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MTPApplicantRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MTPApplicantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MTPApplicantRowChangedEvent) Is Nothing) Then
                RaiseEvent MTPApplicantRowChanged(Me, New MTPApplicantRowChangeEvent(CType(e.Row,MTPApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MTPApplicantRowChangingEvent) Is Nothing) Then
                RaiseEvent MTPApplicantRowChanging(Me, New MTPApplicantRowChangeEvent(CType(e.Row,MTPApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MTPApplicantRowDeletedEvent) Is Nothing) Then
                RaiseEvent MTPApplicantRowDeleted(Me, New MTPApplicantRowChangeEvent(CType(e.Row,MTPApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MTPApplicantRowDeletingEvent) Is Nothing) Then
                RaiseEvent MTPApplicantRowDeleting(Me, New MTPApplicantRowChangeEvent(CType(e.Row,MTPApplicantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMTPApplicantRow(ByVal row As MTPApplicantRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS005 = New DS005
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MTPApplicantDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OriginalApplicantRow
        Inherits Global.System.Data.DataRow
        
        Private tableOriginalApplicant As OriginalApplicantDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOriginalApplicant = CType(Me.Table,OriginalApplicantDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUDGET_YEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.BUDGET_YEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUDGET_YEAR' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.BUDGET_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERIOD_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.PERIOD_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD_TYPE' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.PERIOD_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUDGET_ORDER_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.BUDGET_ORDER_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUDGET_ORDER_NO' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.BUDGET_ORDER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.ACCOUNT_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_NO' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.ACCOUNT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.ACCOUNT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_NAME' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.ACCOUNT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.COSTColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COST' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPENSE_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.EXPENSE_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPENSE_TYPE' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.EXPENSE_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REV_NO() As Short
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.REV_NOColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REV_NO' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.REV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTUAL_1ST_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.ACTUAL_1ST_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTUAL_1ST_HALF' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.ACTUAL_1ST_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REVISE_2ND_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.REVISE_2ND_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REVISE_2ND_HALF' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.REVISE_2ND_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M1' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M2' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M3' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M4' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M5' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M6() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M6Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M6' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M7() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M7Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M7' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M8() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M8Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M8' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M9() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M9Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M9' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M10() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M10Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M10' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M11() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M11Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M11' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M12() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.M12Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M12' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.M12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_1ST_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.TOTAL_1ST_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_1ST_HALF' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.TOTAL_1ST_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_2ND_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.TOTAL_2ND_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_2ND_HALF' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.TOTAL_2ND_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MTP_RRT1() As Double
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.MTP_RRT1Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTP_RRT1' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.MTP_RRT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOTAL_YEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableOriginalApplicant.TOTAL_YEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TOTAL_YEAR' in table 'OriginalApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOriginalApplicant.TOTAL_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBUDGET_YEARNull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.BUDGET_YEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBUDGET_YEARNull()
            Me(Me.tableOriginalApplicant.BUDGET_YEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERIOD_TYPENull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.PERIOD_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERIOD_TYPENull()
            Me(Me.tableOriginalApplicant.PERIOD_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBUDGET_ORDER_NONull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.BUDGET_ORDER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBUDGET_ORDER_NONull()
            Me(Me.tableOriginalApplicant.BUDGET_ORDER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCOUNT_NONull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.ACCOUNT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCOUNT_NONull()
            Me(Me.tableOriginalApplicant.ACCOUNT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCOUNT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.ACCOUNT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCOUNT_NAMENull()
            Me(Me.tableOriginalApplicant.ACCOUNT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSTNull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSTNull()
            Me(Me.tableOriginalApplicant.COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPENSE_TYPENull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.EXPENSE_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPENSE_TYPENull()
            Me(Me.tableOriginalApplicant.EXPENSE_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREV_NONull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.REV_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREV_NONull()
            Me(Me.tableOriginalApplicant.REV_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTUAL_1ST_HALFNull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.ACTUAL_1ST_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTUAL_1ST_HALFNull()
            Me(Me.tableOriginalApplicant.ACTUAL_1ST_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREVISE_2ND_HALFNull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.REVISE_2ND_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREVISE_2ND_HALFNull()
            Me(Me.tableOriginalApplicant.REVISE_2ND_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM1Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM1Null()
            Me(Me.tableOriginalApplicant.M1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM2Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM2Null()
            Me(Me.tableOriginalApplicant.M2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM3Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM3Null()
            Me(Me.tableOriginalApplicant.M3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM4Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM4Null()
            Me(Me.tableOriginalApplicant.M4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM5Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM5Null()
            Me(Me.tableOriginalApplicant.M5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM6Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM6Null()
            Me(Me.tableOriginalApplicant.M6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM7Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM7Null()
            Me(Me.tableOriginalApplicant.M7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM8Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM8Null()
            Me(Me.tableOriginalApplicant.M8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM9Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM9Null()
            Me(Me.tableOriginalApplicant.M9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM10Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM10Null()
            Me(Me.tableOriginalApplicant.M10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM11Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM11Null()
            Me(Me.tableOriginalApplicant.M11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM12Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.M12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM12Null()
            Me(Me.tableOriginalApplicant.M12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_1ST_HALFNull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.TOTAL_1ST_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_1ST_HALFNull()
            Me(Me.tableOriginalApplicant.TOTAL_1ST_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_2ND_HALFNull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.TOTAL_2ND_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_2ND_HALFNull()
            Me(Me.tableOriginalApplicant.TOTAL_2ND_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMTP_RRT1Null() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.MTP_RRT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMTP_RRT1Null()
            Me(Me.tableOriginalApplicant.MTP_RRT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOTAL_YEARNull() As Boolean
            Return Me.IsNull(Me.tableOriginalApplicant.TOTAL_YEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOTAL_YEARNull()
            Me(Me.tableOriginalApplicant.TOTAL_YEARColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EstimateApplicantRow
        Inherits Global.System.Data.DataRow
        
        Private tableEstimateApplicant As EstimateApplicantDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEstimateApplicant = CType(Me.Table,EstimateApplicantDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUDGET_YEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.BUDGET_YEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUDGET_YEAR' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.BUDGET_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERIOD_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.PERIOD_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD_TYPE' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.PERIOD_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUDGET_ORDER_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.BUDGET_ORDER_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUDGET_ORDER_NO' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.BUDGET_ORDER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ACCOUNT_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_NO' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ACCOUNT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ACCOUNT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_NAME' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ACCOUNT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.COSTColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COST' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPENSE_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.EXPENSE_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPENSE_TYPE' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.EXPENSE_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REV_NO() As Short
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.REV_NOColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REV_NO' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.REV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M1' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M2' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M3' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M4' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M5' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M6() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M6Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M6' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M7() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M7Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M7' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M8() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M8Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M8' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M9() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M9Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M9' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M10() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M10Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M10' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M11() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M11Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M11' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M12() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.M12Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M12' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.M12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTUAL_1ST_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ACTUAL_1ST_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTUAL_1ST_HALF' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ACTUAL_1ST_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REVISE_BUDGET_2ND_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.REVISE_BUDGET_2ND_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REVISE_BUDGET_2ND_HALF' in table 'EstimateApplicant' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.REVISE_BUDGET_2ND_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTUAL_JUL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ACTUAL_JULColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTUAL_JUL' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ACTUAL_JULColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTUAL_AUG() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ACTUAL_AUGColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTUAL_AUG' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ACTUAL_AUGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTUAL_SEP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ACTUAL_SEPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTUAL_SEP' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ACTUAL_SEPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTIMATE_OCT() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ESTIMATE_OCTColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTIMATE_OCT' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ESTIMATE_OCTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTIMATE_NOV() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ESTIMATE_NOVColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTIMATE_NOV' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ESTIMATE_NOVColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTIMATE_DEC() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ESTIMATE_DECColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTIMATE_DEC' in table 'EstimateApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ESTIMATE_DECColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTIMATE_BUDGET_2ND_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ESTIMATE_BUDGET_2ND_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTIMATE_BUDGET_2ND_HALF' in table 'EstimateApplicant' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ESTIMATE_BUDGET_2ND_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DIFFERENCE_2ND_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.DIFFERENCE_2ND_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DIFFERENCE_2ND_HALF' in table 'EstimateApplicant' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.DIFFERENCE_2ND_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTIMATE_BUDGET_TOTAL() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableEstimateApplicant.ESTIMATE_BUDGET_TOTALColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTIMATE_BUDGET_TOTAL' in table 'EstimateApplicant' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableEstimateApplicant.ESTIMATE_BUDGET_TOTALColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBUDGET_YEARNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.BUDGET_YEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBUDGET_YEARNull()
            Me(Me.tableEstimateApplicant.BUDGET_YEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERIOD_TYPENull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.PERIOD_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERIOD_TYPENull()
            Me(Me.tableEstimateApplicant.PERIOD_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBUDGET_ORDER_NONull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.BUDGET_ORDER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBUDGET_ORDER_NONull()
            Me(Me.tableEstimateApplicant.BUDGET_ORDER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCOUNT_NONull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ACCOUNT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCOUNT_NONull()
            Me(Me.tableEstimateApplicant.ACCOUNT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCOUNT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ACCOUNT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCOUNT_NAMENull()
            Me(Me.tableEstimateApplicant.ACCOUNT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSTNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSTNull()
            Me(Me.tableEstimateApplicant.COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPENSE_TYPENull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.EXPENSE_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPENSE_TYPENull()
            Me(Me.tableEstimateApplicant.EXPENSE_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREV_NONull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.REV_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREV_NONull()
            Me(Me.tableEstimateApplicant.REV_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM1Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM1Null()
            Me(Me.tableEstimateApplicant.M1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM2Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM2Null()
            Me(Me.tableEstimateApplicant.M2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM3Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM3Null()
            Me(Me.tableEstimateApplicant.M3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM4Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM4Null()
            Me(Me.tableEstimateApplicant.M4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM5Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM5Null()
            Me(Me.tableEstimateApplicant.M5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM6Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM6Null()
            Me(Me.tableEstimateApplicant.M6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM7Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM7Null()
            Me(Me.tableEstimateApplicant.M7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM8Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM8Null()
            Me(Me.tableEstimateApplicant.M8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM9Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM9Null()
            Me(Me.tableEstimateApplicant.M9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM10Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM10Null()
            Me(Me.tableEstimateApplicant.M10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM11Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM11Null()
            Me(Me.tableEstimateApplicant.M11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM12Null() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.M12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM12Null()
            Me(Me.tableEstimateApplicant.M12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTUAL_1ST_HALFNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ACTUAL_1ST_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTUAL_1ST_HALFNull()
            Me(Me.tableEstimateApplicant.ACTUAL_1ST_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREVISE_BUDGET_2ND_HALFNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.REVISE_BUDGET_2ND_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREVISE_BUDGET_2ND_HALFNull()
            Me(Me.tableEstimateApplicant.REVISE_BUDGET_2ND_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTUAL_JULNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ACTUAL_JULColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTUAL_JULNull()
            Me(Me.tableEstimateApplicant.ACTUAL_JULColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTUAL_AUGNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ACTUAL_AUGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTUAL_AUGNull()
            Me(Me.tableEstimateApplicant.ACTUAL_AUGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTUAL_SEPNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ACTUAL_SEPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTUAL_SEPNull()
            Me(Me.tableEstimateApplicant.ACTUAL_SEPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTIMATE_OCTNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ESTIMATE_OCTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTIMATE_OCTNull()
            Me(Me.tableEstimateApplicant.ESTIMATE_OCTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTIMATE_NOVNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ESTIMATE_NOVColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTIMATE_NOVNull()
            Me(Me.tableEstimateApplicant.ESTIMATE_NOVColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTIMATE_DECNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ESTIMATE_DECColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTIMATE_DECNull()
            Me(Me.tableEstimateApplicant.ESTIMATE_DECColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTIMATE_BUDGET_2ND_HALFNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ESTIMATE_BUDGET_2ND_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTIMATE_BUDGET_2ND_HALFNull()
            Me(Me.tableEstimateApplicant.ESTIMATE_BUDGET_2ND_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDIFFERENCE_2ND_HALFNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.DIFFERENCE_2ND_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDIFFERENCE_2ND_HALFNull()
            Me(Me.tableEstimateApplicant.DIFFERENCE_2ND_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTIMATE_BUDGET_TOTALNull() As Boolean
            Return Me.IsNull(Me.tableEstimateApplicant.ESTIMATE_BUDGET_TOTALColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTIMATE_BUDGET_TOTALNull()
            Me(Me.tableEstimateApplicant.ESTIMATE_BUDGET_TOTALColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReviseApplicantRow
        Inherits Global.System.Data.DataRow
        
        Private tableReviseApplicant As ReviseApplicantDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReviseApplicant = CType(Me.Table,ReviseApplicantDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUDGET_YEAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.BUDGET_YEARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUDGET_YEAR' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.BUDGET_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERIOD_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.PERIOD_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PERIOD_TYPE' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.PERIOD_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUDGET_ORDER_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.BUDGET_ORDER_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BUDGET_ORDER_NO' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.BUDGET_ORDER_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ACCOUNT_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_NO' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ACCOUNT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ACCOUNT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_NAME' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ACCOUNT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.COSTColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COST' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPENSE_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.EXPENSE_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPENSE_TYPE' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.EXPENSE_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REV_NO() As Short
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.REV_NOColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REV_NO' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.REV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M1' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M2' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M3' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M4' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M5' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M6() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M6Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M6' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M7() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M7Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M7' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M8() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M8Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M8' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M8Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M9() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M9Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M9' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M9Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M10() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M10Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M10' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M10Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M11() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M11Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M11' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property M12() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.M12Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'M12' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.M12Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORIGINAL_1ST_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ORIGINAL_1ST_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORIGINAL_1ST_HALF' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ORIGINAL_1ST_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTUAL_JAN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ACTUAL_JANColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTUAL_JAN' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ACTUAL_JANColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTUAL_FEB() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ACTUAL_FEBColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTUAL_FEB' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ACTUAL_FEBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACTUAL_MAR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ACTUAL_MARColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACTUAL_MAR' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ACTUAL_MARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTIMATE_APR() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ESTIMATE_APRColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTIMATE_APR' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ESTIMATE_APRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTIMATE_MAY() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ESTIMATE_MAYColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTIMATE_MAY' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ESTIMATE_MAYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTIMATE_JUN() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ESTIMATE_JUNColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTIMATE_JUN' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ESTIMATE_JUNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTIMATE_1ST_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ESTIMATE_1ST_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESTIMATE_1ST_HALF' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ESTIMATE_1ST_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORIGINAL_2ND_HALF() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.ORIGINAL_2ND_HALFColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ORIGINAL_2ND_HALF' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.ORIGINAL_2ND_HALFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.RRT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRT1' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.RRT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRT2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.RRT2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRT2' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.RRT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRT3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.RRT3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRT3' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.RRT3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRT4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.RRT4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRT4' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.RRT4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRT5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableReviseApplicant.RRT5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRT5' in table 'ReviseApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableReviseApplicant.RRT5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBUDGET_YEARNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.BUDGET_YEARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBUDGET_YEARNull()
            Me(Me.tableReviseApplicant.BUDGET_YEARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPERIOD_TYPENull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.PERIOD_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPERIOD_TYPENull()
            Me(Me.tableReviseApplicant.PERIOD_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBUDGET_ORDER_NONull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.BUDGET_ORDER_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBUDGET_ORDER_NONull()
            Me(Me.tableReviseApplicant.BUDGET_ORDER_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCOUNT_NONull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ACCOUNT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCOUNT_NONull()
            Me(Me.tableReviseApplicant.ACCOUNT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCOUNT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ACCOUNT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCOUNT_NAMENull()
            Me(Me.tableReviseApplicant.ACCOUNT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSTNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSTNull()
            Me(Me.tableReviseApplicant.COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPENSE_TYPENull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.EXPENSE_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPENSE_TYPENull()
            Me(Me.tableReviseApplicant.EXPENSE_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREV_NONull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.REV_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREV_NONull()
            Me(Me.tableReviseApplicant.REV_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM1Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM1Null()
            Me(Me.tableReviseApplicant.M1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM2Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM2Null()
            Me(Me.tableReviseApplicant.M2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM3Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM3Null()
            Me(Me.tableReviseApplicant.M3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM4Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM4Null()
            Me(Me.tableReviseApplicant.M4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM5Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM5Null()
            Me(Me.tableReviseApplicant.M5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM6Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM6Null()
            Me(Me.tableReviseApplicant.M6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM7Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM7Null()
            Me(Me.tableReviseApplicant.M7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM8Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M8Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM8Null()
            Me(Me.tableReviseApplicant.M8Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM9Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M9Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM9Null()
            Me(Me.tableReviseApplicant.M9Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM10Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M10Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM10Null()
            Me(Me.tableReviseApplicant.M10Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM11Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM11Null()
            Me(Me.tableReviseApplicant.M11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsM12Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.M12Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetM12Null()
            Me(Me.tableReviseApplicant.M12Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORIGINAL_1ST_HALFNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ORIGINAL_1ST_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORIGINAL_1ST_HALFNull()
            Me(Me.tableReviseApplicant.ORIGINAL_1ST_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTUAL_JANNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ACTUAL_JANColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTUAL_JANNull()
            Me(Me.tableReviseApplicant.ACTUAL_JANColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTUAL_FEBNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ACTUAL_FEBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTUAL_FEBNull()
            Me(Me.tableReviseApplicant.ACTUAL_FEBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACTUAL_MARNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ACTUAL_MARColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACTUAL_MARNull()
            Me(Me.tableReviseApplicant.ACTUAL_MARColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTIMATE_APRNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ESTIMATE_APRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTIMATE_APRNull()
            Me(Me.tableReviseApplicant.ESTIMATE_APRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTIMATE_MAYNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ESTIMATE_MAYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTIMATE_MAYNull()
            Me(Me.tableReviseApplicant.ESTIMATE_MAYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTIMATE_JUNNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ESTIMATE_JUNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTIMATE_JUNNull()
            Me(Me.tableReviseApplicant.ESTIMATE_JUNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESTIMATE_1ST_HALFNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ESTIMATE_1ST_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESTIMATE_1ST_HALFNull()
            Me(Me.tableReviseApplicant.ESTIMATE_1ST_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsORIGINAL_2ND_HALFNull() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.ORIGINAL_2ND_HALFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetORIGINAL_2ND_HALFNull()
            Me(Me.tableReviseApplicant.ORIGINAL_2ND_HALFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRT1Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.RRT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRT1Null()
            Me(Me.tableReviseApplicant.RRT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRT2Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.RRT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRT2Null()
            Me(Me.tableReviseApplicant.RRT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRT3Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.RRT3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRT3Null()
            Me(Me.tableReviseApplicant.RRT3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRT4Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.RRT4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRT4Null()
            Me(Me.tableReviseApplicant.RRT4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRT5Null() As Boolean
            Return Me.IsNull(Me.tableReviseApplicant.RRT5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRT5Null()
            Me(Me.tableReviseApplicant.RRT5Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BG_M_SETTINGSRow
        Inherits Global.System.Data.DataRow
        
        Private tableBG_M_SETTINGS As BG_M_SETTINGSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBG_M_SETTINGS = CType(Me.Table,BG_M_SETTINGSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUTH1_IMAGE() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableBG_M_SETTINGS.AUTH1_IMAGEColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AUTH1_IMAGE' in table 'BG_M_SETTINGS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBG_M_SETTINGS.AUTH1_IMAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AUTH2_IMAGE() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableBG_M_SETTINGS.AUTH2_IMAGEColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AUTH2_IMAGE' in table 'BG_M_SETTINGS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBG_M_SETTINGS.AUTH2_IMAGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUTH1_IMAGENull() As Boolean
            Return Me.IsNull(Me.tableBG_M_SETTINGS.AUTH1_IMAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUTH1_IMAGENull()
            Me(Me.tableBG_M_SETTINGS.AUTH1_IMAGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAUTH2_IMAGENull() As Boolean
            Return Me.IsNull(Me.tableBG_M_SETTINGS.AUTH2_IMAGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAUTH2_IMAGENull()
            Me(Me.tableBG_M_SETTINGS.AUTH2_IMAGEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MTPApplicantRow
        Inherits Global.System.Data.DataRow
        
        Private tableMTPApplicant As MTPApplicantDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMTPApplicant = CType(Me.Table,MTPApplicantDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BUDGET_YEAR() As Decimal
            Get
                Return CType(Me(Me.tableMTPApplicant.BUDGET_YEARColumn),Decimal)
            End Get
            Set
                Me(Me.tableMTPApplicant.BUDGET_YEARColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PERIOD_TYPE() As Byte
            Get
                Return CType(Me(Me.tableMTPApplicant.PERIOD_TYPEColumn),Byte)
            End Get
            Set
                Me(Me.tableMTPApplicant.PERIOD_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROJECT_NO() As Byte
            Get
                Return CType(Me(Me.tableMTPApplicant.PROJECT_NOColumn),Byte)
            End Get
            Set
                Me(Me.tableMTPApplicant.PROJECT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_NO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.ACCOUNT_NOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_NO' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.ACCOUNT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ACCOUNT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.ACCOUNT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ACCOUNT_NAME' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.ACCOUNT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EXPENSE_TYPE() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.EXPENSE_TYPEColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXPENSE_TYPE' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.EXPENSE_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COST() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.COSTColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COST' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.COSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REV_NO() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.REV_NOColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'REV_NO' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.REV_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.RRT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRT1' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.RRT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRT2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.RRT2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRT2' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.RRT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRT3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.RRT3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRT3' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.RRT3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRT4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.RRT4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRT4' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.RRT4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RRT5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.RRT5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RRT5' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.RRT5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RevYear() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.RevYearColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RevYear' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.RevYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrevRRT1() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.PrevRRT1Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrevRRT1' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.PrevRRT1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrevRRT2() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.PrevRRT2Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrevRRT2' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.PrevRRT2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrevRRT3() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.PrevRRT3Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrevRRT3' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.PrevRRT3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrevRRT4() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.PrevRRT4Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrevRRT4' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.PrevRRT4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrevRRT5() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.PrevRRT5Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PrevRRT5' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.PrevRRT5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiffYear() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableMTPApplicant.DiffYearColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DiffYear' in table 'MTPApplicant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMTPApplicant.DiffYearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCOUNT_NONull() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.ACCOUNT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCOUNT_NONull()
            Me(Me.tableMTPApplicant.ACCOUNT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsACCOUNT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.ACCOUNT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetACCOUNT_NAMENull()
            Me(Me.tableMTPApplicant.ACCOUNT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEXPENSE_TYPENull() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.EXPENSE_TYPEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEXPENSE_TYPENull()
            Me(Me.tableMTPApplicant.EXPENSE_TYPEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOSTNull() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.COSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOSTNull()
            Me(Me.tableMTPApplicant.COSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsREV_NONull() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.REV_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetREV_NONull()
            Me(Me.tableMTPApplicant.REV_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRT1Null() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.RRT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRT1Null()
            Me(Me.tableMTPApplicant.RRT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRT2Null() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.RRT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRT2Null()
            Me(Me.tableMTPApplicant.RRT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRT3Null() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.RRT3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRT3Null()
            Me(Me.tableMTPApplicant.RRT3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRT4Null() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.RRT4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRT4Null()
            Me(Me.tableMTPApplicant.RRT4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRRT5Null() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.RRT5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRRT5Null()
            Me(Me.tableMTPApplicant.RRT5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRevYearNull() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.RevYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRevYearNull()
            Me(Me.tableMTPApplicant.RevYearColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrevRRT1Null() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.PrevRRT1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrevRRT1Null()
            Me(Me.tableMTPApplicant.PrevRRT1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrevRRT2Null() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.PrevRRT2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrevRRT2Null()
            Me(Me.tableMTPApplicant.PrevRRT2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrevRRT3Null() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.PrevRRT3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrevRRT3Null()
            Me(Me.tableMTPApplicant.PrevRRT3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrevRRT4Null() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.PrevRRT4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrevRRT4Null()
            Me(Me.tableMTPApplicant.PrevRRT4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrevRRT5Null() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.PrevRRT5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrevRRT5Null()
            Me(Me.tableMTPApplicant.PrevRRT5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiffYearNull() As Boolean
            Return Me.IsNull(Me.tableMTPApplicant.DiffYearColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiffYearNull()
            Me(Me.tableMTPApplicant.DiffYearColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OriginalApplicantRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OriginalApplicantRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OriginalApplicantRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OriginalApplicantRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EstimateApplicantRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EstimateApplicantRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EstimateApplicantRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EstimateApplicantRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReviseApplicantRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ReviseApplicantRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReviseApplicantRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReviseApplicantRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BG_M_SETTINGSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BG_M_SETTINGSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BG_M_SETTINGSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BG_M_SETTINGSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MTPApplicantRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MTPApplicantRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MTPApplicantRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MTPApplicantRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
